apply plugin: 'com.android.application'
apply plugin: 'com.google.gms.google-services'
apply plugin: 'com.google.firebase.crashlytics'

import okhttp3.*

import java.util.concurrent.TimeUnit

repositories {
    mavenCentral()
    google()
}

configurations {
    compile.exclude module: 'support-v4'
}

configurations.configureEach {
    exclude group: 'androidx.recyclerview', module: 'recyclerview'
}

dependencies {
    implementation project(':TMessagesProj')
    implementation 'androidx.fragment:fragment:1.8.3'
    implementation 'androidx.multidex:multidex:2.0.1'
    implementation 'androidx.core:core:1.13.1'
    coreLibraryDesugaring 'com.android.tools:desugar_jdk_libs:1.1.5'
    implementation files('../TMessagesProj/libs/libgsaverification-client.aar')
}

android {
    compileSdk 34
    buildToolsVersion = '34.0.0'

    defaultConfig.applicationId = APP_PACKAGE

    sourceSets.main.jniLibs.srcDirs = ['../TMessagesProj/jni/']

    lintOptions {
        disable 'MissingTranslation'
        disable 'ExtraTranslation'
        disable 'BlockedPrivateApi'
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8

        coreLibraryDesugaringEnabled true
    }

    signingConfigs {
        debug {
            storeFile file('../Your_Key.jks')
            storePassword 'Your_Password'
            keyAlias 'Your_Alias'
            keyPassword 'Your_Password'
        }

        release {
            storeFile file('../Your_Key.jks')
            storePassword 'Your_Password'
            keyAlias 'Your_Alias'
            keyPassword 'Your_Password'
        }
    }

    buildTypes {
        debug {
            debuggable true
            jniDebuggable true
            signingConfig signingConfigs.release
//            applicationIdSuffix ".web"
            minifyEnabled false
            multiDexEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), '../TMessagesProj/proguard-rules.pro', '../TMessagesProj/proguard-rules-beta.pro'
            ndk.debugSymbolLevel = 'FULL'
        }
        standalone {
            debuggable false
            jniDebuggable false
            signingConfig signingConfigs.release
//            applicationIdSuffix ".web"
            minifyEnabled true
            multiDexEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), '../TMessagesProj/proguard-rules.pro'
            ndk.debugSymbolLevel = 'FULL'
        }
    }

    sourceSets.debug {
        manifest.srcFile '../TMessagesProj/config/release/AndroidManifest_standalone.xml'
    }
    sourceSets.standalone {
        manifest.srcFile '../TMessagesProj/config/release/AndroidManifest_standalone.xml'
    }

    flavorDimensions = ["minApi"]

    productFlavors {
        afat {
            ndk {
                //noinspection ChromeOsAbiSupport
                abiFilters "armeabi-v7a", "arm64-v8a"/*, "x86", "x86_64"*/
            }
            ext {
                abiVersionCode = 9
            }
            sourceSets.standalone {
                manifest.srcFile '../TMessagesProj/config/release/AndroidManifest_standalone.xml'
            }
        }
    }

    defaultConfig.versionCode = Integer.parseInt(APP_VERSION_CODE)

    applicationVariants.configureEach { variant ->
        variant.outputs.configureEach { output ->
            def abi = output.getFilter('ABI')
            if (abi == null) abi = 'universal'
            outputFileName = "Cherrygram-${APP_VERSION_NAME_CHERRY}-TG-${defaultConfig.versionName}-${abi}.apk"
            output.versionCodeOverride = defaultConfig.versionCode * 10
        }
    }

    variantFilter { variant ->
        def names = variant.flavors*.name
        if (variant.buildType.name != "release" && !names.contains("afat")) {
            setIgnore(true)
        }
    }

    defaultConfig {
        minSdkVersion 21
        targetSdkVersion 34
        versionName APP_VERSION_NAME
        ndkVersion "21.4.7075529"

        multiDexEnabled true

        vectorDrawables.generatedDensities = ['mdpi', 'hdpi', 'xhdpi', 'xxhdpi']

        externalNativeBuild {
            cmake {
                version '3.10.2'
                arguments '-DANDROID_STL=c++_static', '-DANDROID_PLATFORM=android-21'
            }
        }
    }

    buildFeatures {
        buildConfig = true
    }
    namespace 'org.telegram.messenger.web'

    lintOptions {
        checkReleaseBuilds false
    }

    bundle {
        language {
            enableSplit = false
        }
    }

    splits.abi {
        enable true
        reset()
        //noinspection ChromeOsAbiSupport
        include "arm64-v8a", "armeabi-v7a"
        universalApk true
    }
}

def fileName = "Cherrygram-${APP_VERSION_NAME_CHERRY}-TG-${APP_VERSION_NAME}-arm64-v8a.apk"
def apkFilePath = "${projectDir}/afat/standalone/${fileName}"

def fileName2 = "Cherrygram-${APP_VERSION_NAME_CHERRY}-TG-${APP_VERSION_NAME}-armeabi-v7a.apk"
def apkFilePath2 = "${projectDir}/afat/standalone/${fileName2}"

tasks.register('copyFiles', Copy) {
    from "${projectDir}/afat/standalone/"
    include '**/*.apk'
    exclude 'baselineProfiles/**'
    into "C:/Users/${SYSTEM_USERNAME}/Desktop/Cherry/Stable"
}

tasks.register('sendApk') {
    doLast {
        def file = new File(apkFilePath)
        def file2 = new File(apkFilePath2)

        if (!file.exists() && !file2.exists()) {
            println "APK file not found: $apkFilePath"
            println "APK file not found: $apkFilePath2"
            return
        }

        println "Sending APK to Cherrygram Support..."

        try {
            sendApkToTelegram(file)
            sendApkToTelegram(file2)
        } catch (Exception e) {
            println "Error sending APK: ${e.message}"
            e.printStackTrace()
        }
    }
}

void sendApkToTelegram(File file) {
    OkHttpClient client = new OkHttpClient.Builder()
            .connectTimeout(90, TimeUnit.SECONDS)
            .build()

    def fileCaption
    if (file.name.contains("arm64-v8a")) {
        fileCaption = "*arm64-v8a*"
    } else if (file.name.contains("armeabi-v7a")) {
        fileCaption = "*armeabi-v7a*"
    } else {
        fileCaption = "*universal*"
    }

    def requestBody = new MultipartBody.Builder()
            .setType(MultipartBody.FORM)
            .addFormDataPart("chat_id", TELEGRAM_CHAT_ID)
            .addFormDataPart("document", file.name,
                    RequestBody.create(MediaType.parse("application/vnd.android.package-archive"), file)
            )
            .addFormDataPart("caption", fileCaption)
            .addFormDataPart("parse_mode", "Markdown")
            .build()

    def request = new Request.Builder()
            .url("https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendDocument")
            .post(requestBody)
            .build()

    println "Uploading file: ${file.name}, size: ${file.length()} bytes"

    client.newCall(request).execute().withCloseable { response ->
        if (response.isSuccessful()) {
            println "APK successfully sent to Cherrygram Support!"
        } else {
            throw new RuntimeException("HTTP ${response.code()} - ${response.message()}")
        }
    }
}

tasks.configureEach { task ->
    if (task.name == 'extractProguardFiles') {
        task.doFirst {
            delete "${projectDir}/afat/standalone/"
        }
    }
    if (task.name == 'assembleAfatStandalone') {
        sendApk.mustRunAfter copyFiles
        task.finalizedBy 'copyFiles', 'sendApk'
    }
}